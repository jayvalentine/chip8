require 'erb'

namespace 'test' do
    desc "Run unit tests"
    task 'unit' do
        unit_test_function = /TEST\((\S+)\)/

        # Get a list of test functions.
        test_functions = {}
        test_files = []

        Dir.glob('test/*.c').each do |c|
            test_class = File.basename(c, '.c')
            test_files << c

            next if test_class == 'main'

            File.open(c, 'r') do |f|
                f.each_line do |l|
                    if unit_test_function =~ l
                        test_functions[test_class] = [] if test_functions[test_class].nil?

                        test_functions[test_class] << $1
                    end
                end
            end
        end

        # Generate test runner main file.
        renderer = ERB.new(File.read('test/main.c.erb'))
        File.write('test/main.c', renderer.result(binding))

        source_files = FileList.new("src/*.c") do |fl|
            fl.exclude "src/main.c"
        end

        # Compile tests.
        result = system("gcc -Wall -Werror -I. -o test/unit.exe munit/munit.c #{source_files.join(" ")} #{test_files.join(" ")}")
        abort("Compiling unit tests failed!") unless result

        # Run tests.
        result = system("./test/unit.exe")
        abort("Tests failed!") unless result
    end

end

desc "Run all tests"
task 'test' => ['test:unit']

namespace 'build' do
    Dir.glob("platforms/*").each do |platform_dir|
        platform = File.basename(platform_dir)
        
        desc "Build for platform '#{platform}'"
        task platform => 'test' do
            source_files = FileList.new("src/*.c")

            result = system("gcc -Wall -Werror -I. -o chip8.exe #{source_files.join(" ")} #{platform_dir}/platform.c -lSDL2")
            abort("Build failed!") unless result
        end
    end
end

task 'diag' => 'build:sdl2' do
    system("./chip8.exe programs/test.ch8")
end
